#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const https = require('https')
const program = require('commander')
const express = require('express')
const sh = require('shelljs')
const chalk = require('chalk')
const boxen = require('boxen')
const pkg = require('../package.json')

const TMP_DIR = '../.tmp'
const key = path.join(__dirname, TMP_DIR, 'server.key')
const cert = path.join(__dirname, TMP_DIR, 'server.crt')

const genCert = () => new Promise((resolve, reject) => {
  if (!fs.existsSync(key) || !fs.existsSync(cert)) {
    sh.exec(`cd ${__dirname} && ./cert.sh`, err => {
      if (err) reject(err)
      else resolve()
    })
  } else {
    resolve()
  }
})

const serve = (dir, port = 5000) => {
  const app = express()
  const webroot = dir.indexOf('/') === 0 ? dir : path.resolve(dir)
  app.use(express.static(webroot))
  app.get('/ca.pem', (req, res) => {
    res.sendFile(path.join(__dirname, TMP_DIR, 'rootCA.pem'))
  })

  const server = https.createServer({
    key: fs.readFileSync(key),
    cert: fs.readFileSync(cert)
  }, app)
  
  server.listen(port, () => {
    const prefix = '- '
    let message = chalk.green('Serving!\n')
    
    message += `\n${prefix}${chalk.bold('Listen on:')}        https://localhost:${port}`
    message += `\n${prefix}${chalk.bold('CA download url:')}  https://localhost:${port}/ca.pem`

    message += `\n\n${chalk.grey('Download CA and make it local trusted to prevent browser\'s unsafe warning/error.')}`

    console.log(boxen(message, {
      padding: 1,
      borderColor: 'green',
      margin: 1
    }))
  })

  server.on('error', err => {
    console.log(`${chalk.red('Error:')}  ${err.message}`)
  })  
}

program
  .version(pkg.version, '-v, --version')

program
  .usage('[options] <webroot>')
  .description('serve your resources via a https server on localhost')
  .option('--port [port]', 'port to listen')

program
  .arguments('<webroot>')
  .action((webroot, options) => genCert().then(() => serve(webroot, options.port)))

if (process.argv.slice(2).length === 0) {
  program.outputHelp()
}

program.parse(process.argv)
